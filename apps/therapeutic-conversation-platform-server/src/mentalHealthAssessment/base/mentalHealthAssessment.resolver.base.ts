/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MentalHealthAssessment } from "./MentalHealthAssessment";
import { MentalHealthAssessmentCountArgs } from "./MentalHealthAssessmentCountArgs";
import { MentalHealthAssessmentFindManyArgs } from "./MentalHealthAssessmentFindManyArgs";
import { MentalHealthAssessmentFindUniqueArgs } from "./MentalHealthAssessmentFindUniqueArgs";
import { CreateMentalHealthAssessmentArgs } from "./CreateMentalHealthAssessmentArgs";
import { UpdateMentalHealthAssessmentArgs } from "./UpdateMentalHealthAssessmentArgs";
import { DeleteMentalHealthAssessmentArgs } from "./DeleteMentalHealthAssessmentArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { MentalHealthAssessmentService } from "../mentalHealthAssessment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MentalHealthAssessment)
export class MentalHealthAssessmentResolverBase {
  constructor(
    protected readonly service: MentalHealthAssessmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "read",
    possession: "any",
  })
  async _mentalHealthAssessmentsMeta(
    @graphql.Args() args: MentalHealthAssessmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MentalHealthAssessment])
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "read",
    possession: "any",
  })
  async mentalHealthAssessments(
    @graphql.Args() args: MentalHealthAssessmentFindManyArgs
  ): Promise<MentalHealthAssessment[]> {
    return this.service.mentalHealthAssessments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MentalHealthAssessment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "read",
    possession: "own",
  })
  async mentalHealthAssessment(
    @graphql.Args() args: MentalHealthAssessmentFindUniqueArgs
  ): Promise<MentalHealthAssessment | null> {
    const result = await this.service.mentalHealthAssessment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MentalHealthAssessment)
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "create",
    possession: "any",
  })
  async createMentalHealthAssessment(
    @graphql.Args() args: CreateMentalHealthAssessmentArgs
  ): Promise<MentalHealthAssessment> {
    return await this.service.createMentalHealthAssessment({
      ...args,
      data: {
        ...args.data,

        userProfile: args.data.userProfile
          ? {
              connect: args.data.userProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MentalHealthAssessment)
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "update",
    possession: "any",
  })
  async updateMentalHealthAssessment(
    @graphql.Args() args: UpdateMentalHealthAssessmentArgs
  ): Promise<MentalHealthAssessment | null> {
    try {
      return await this.service.updateMentalHealthAssessment({
        ...args,
        data: {
          ...args.data,

          userProfile: args.data.userProfile
            ? {
                connect: args.data.userProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MentalHealthAssessment)
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "delete",
    possession: "any",
  })
  async deleteMentalHealthAssessment(
    @graphql.Args() args: DeleteMentalHealthAssessmentArgs
  ): Promise<MentalHealthAssessment | null> {
    try {
      return await this.service.deleteMentalHealthAssessment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfile",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfile(
    @graphql.Parent() parent: MentalHealthAssessment
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
