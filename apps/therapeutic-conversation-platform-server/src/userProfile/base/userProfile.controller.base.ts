/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserProfileService } from "../userProfile.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserProfileCreateInput } from "./UserProfileCreateInput";
import { UserProfile } from "./UserProfile";
import { UserProfileFindManyArgs } from "./UserProfileFindManyArgs";
import { UserProfileWhereUniqueInput } from "./UserProfileWhereUniqueInput";
import { UserProfileUpdateInput } from "./UserProfileUpdateInput";
import { ConversationFindManyArgs } from "../../conversation/base/ConversationFindManyArgs";
import { Conversation } from "../../conversation/base/Conversation";
import { ConversationWhereUniqueInput } from "../../conversation/base/ConversationWhereUniqueInput";
import { MentalHealthAssessmentFindManyArgs } from "../../mentalHealthAssessment/base/MentalHealthAssessmentFindManyArgs";
import { MentalHealthAssessment } from "../../mentalHealthAssessment/base/MentalHealthAssessment";
import { MentalHealthAssessmentWhereUniqueInput } from "../../mentalHealthAssessment/base/MentalHealthAssessmentWhereUniqueInput";
import { ReferralFindManyArgs } from "../../referral/base/ReferralFindManyArgs";
import { Referral } from "../../referral/base/Referral";
import { ReferralWhereUniqueInput } from "../../referral/base/ReferralWhereUniqueInput";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { SessionWhereUniqueInput } from "../../session/base/SessionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserProfileControllerBase {
  constructor(
    protected readonly service: UserProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserProfile })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserProfile(
    @common.Body() data: UserProfileCreateInput
  ): Promise<UserProfile> {
    return await this.service.createUserProfile({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        location: true,
        firstName: true,
        lastName: true,
        email: true,
        age: true,
        gender: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserProfile] })
  @ApiNestedQuery(UserProfileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userProfiles(@common.Req() request: Request): Promise<UserProfile[]> {
    const args = plainToClass(UserProfileFindManyArgs, request.query);
    return this.service.userProfiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        location: true,
        firstName: true,
        lastName: true,
        email: true,
        age: true,
        gender: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    const result = await this.service.userProfile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        location: true,
        firstName: true,
        lastName: true,
        email: true,
        age: true,
        gender: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() data: UserProfileUpdateInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.updateUserProfile({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
          location: true,
          firstName: true,
          lastName: true,
          email: true,
          age: true,
          gender: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.deleteUserProfile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
          location: true,
          firstName: true,
          lastName: true,
          email: true,
          age: true,
          gender: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/conversations")
  @ApiNestedQuery(ConversationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Conversation",
    action: "read",
    possession: "any",
  })
  async findConversations(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Conversation[]> {
    const query = plainToClass(ConversationFindManyArgs, request.query);
    const results = await this.service.findConversations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        content: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conversations")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectConversations(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ConversationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversations: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conversations")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateConversations(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ConversationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversations: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conversations")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectConversations(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ConversationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversations: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mentalHealthAssessments")
  @ApiNestedQuery(MentalHealthAssessmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MentalHealthAssessment",
    action: "read",
    possession: "any",
  })
  async findMentalHealthAssessments(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<MentalHealthAssessment[]> {
    const query = plainToClass(
      MentalHealthAssessmentFindManyArgs,
      request.query
    );
    const results = await this.service.findMentalHealthAssessments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        score: true,
        date: true,
        details: true,
        typeField: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mentalHealthAssessments")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectMentalHealthAssessments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: MentalHealthAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentalHealthAssessments: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mentalHealthAssessments")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateMentalHealthAssessments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: MentalHealthAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentalHealthAssessments: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mentalHealthAssessments")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectMentalHealthAssessments(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: MentalHealthAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentalHealthAssessments: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/referrals")
  @ApiNestedQuery(ReferralFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Referral",
    action: "read",
    possession: "any",
  })
  async findReferrals(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Referral[]> {
    const query = plainToClass(ReferralFindManyArgs, request.query);
    const results = await this.service.findReferrals(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        date: true,
        details: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/referrals")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectReferrals(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ReferralWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      referrals: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/referrals")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateReferrals(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ReferralWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      referrals: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/referrals")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectReferrals(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ReferralWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      referrals: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sessions")
  @ApiNestedQuery(SessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async findSessions(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Session[]> {
    const query = plainToClass(SessionFindManyArgs, request.query);
    const results = await this.service.findSessions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,
        notes: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectSessions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateSessions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectSessions(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
