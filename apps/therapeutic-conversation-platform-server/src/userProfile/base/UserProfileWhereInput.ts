/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { EnumUserProfileGender } from "./EnumUserProfileGender";
import { ConversationListRelationFilter } from "../../conversation/base/ConversationListRelationFilter";
import { MentalHealthAssessmentListRelationFilter } from "../../mentalHealthAssessment/base/MentalHealthAssessmentListRelationFilter";
import { ReferralListRelationFilter } from "../../referral/base/ReferralListRelationFilter";
import { SessionListRelationFilter } from "../../session/base/SessionListRelationFilter";

@InputType()
class UserProfileWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  password?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  location?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  age?: IntNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserProfileGender,
  })
  @IsEnum(EnumUserProfileGender)
  @IsOptional()
  @Field(() => EnumUserProfileGender, {
    nullable: true,
  })
  gender?: "Option1";

  @ApiProperty({
    required: false,
    type: () => ConversationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ConversationListRelationFilter)
  @IsOptional()
  @Field(() => ConversationListRelationFilter, {
    nullable: true,
  })
  conversations?: ConversationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MentalHealthAssessmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MentalHealthAssessmentListRelationFilter)
  @IsOptional()
  @Field(() => MentalHealthAssessmentListRelationFilter, {
    nullable: true,
  })
  mentalHealthAssessments?: MentalHealthAssessmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ReferralListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReferralListRelationFilter)
  @IsOptional()
  @Field(() => ReferralListRelationFilter, {
    nullable: true,
  })
  referrals?: ReferralListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SessionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SessionListRelationFilter)
  @IsOptional()
  @Field(() => SessionListRelationFilter, {
    nullable: true,
  })
  sessions?: SessionListRelationFilter;
}

export { UserProfileWhereInput as UserProfileWhereInput };
