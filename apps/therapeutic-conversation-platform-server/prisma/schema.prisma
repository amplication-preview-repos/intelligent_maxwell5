datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Conversation {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  timestamp     DateTime?
  content       String?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model UserProfile {
  id                      String                   @id @default(cuid())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  password                String?
  location                String?
  firstName               String?
  lastName                String?
  email                   String?
  age                     Int?
  gender                  EnumUserProfileGender?
  conversations           Conversation[]
  mentalHealthAssessments MentalHealthAssessment[]
  referrals               Referral[]
  sessions                Session[]
}

model MentalHealthAssessment {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  score         Float?
  date          DateTime?
  details       String?
  typeField     String?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model Referral {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  typeField     String?
  date          DateTime?
  details       String?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model Session {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  startTime     DateTime?
  endTime       DateTime?
  notes         String?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  username  String   @unique
  email     String?  @unique
  password  String
  roles     Json
}

enum EnumUserProfileGender {
  Option1
}
